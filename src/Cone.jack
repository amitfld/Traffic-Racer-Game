/**
* A graphical cone. Characterized by a screen location.
* Has methods for drawing, erasing, getting lane starting point, and moving down the screen.
*/
class Cone{
	field int x, y; //the cone's screen location.

    constructor Tree1 new(int Ax, int Ay){
		let x = Ax;
		let y = Ay;
		return this;
	}

	method void drawCone(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, 128);
	do Memory.poke(memAddress +32, 320);
	do Memory.poke(memAddress +64, 320);
	do Memory.poke(memAddress +96, 992);
	do Memory.poke(memAddress +128, 544);
	do Memory.poke(memAddress +160, 2032);
	do Memory.poke(memAddress +192, 2032);
	do Memory.poke(memAddress +224, 4088);
	do Memory.poke(memAddress +256, 2056);
	do Memory.poke(memAddress +288, 8188);
	do Memory.poke(memAddress +320, 8188);
	do Memory.poke(memAddress +352, 16382);
	do Memory.poke(memAddress +384, 8194);
	do Memory.poke(memAddress +416, 32767);
	do Memory.poke(memAddress +448, 32767);
	return;
	}

	method void eraseCone(int location){
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress, 0);
		do Memory.poke(memAddress +32, 0);
		do Memory.poke(memAddress +64, 0);
		do Memory.poke(memAddress +96, 0);
		do Memory.poke(memAddress +128, 0);
		do Memory.poke(memAddress +160, 0);
		do Memory.poke(memAddress +192, 0);
		do Memory.poke(memAddress +224, 0);
		do Memory.poke(memAddress +256, 0);
		do Memory.poke(memAddress +288, 0);
		do Memory.poke(memAddress +320, 0);
		do Memory.poke(memAddress +352, 0);
		do Memory.poke(memAddress +384, 0);
		do Memory.poke(memAddress +416, 0);
		do Memory.poke(memAddress +448, 0);
		return;
	}

	/**
	* Checks both if the cone is still on screen and if there is a collision 
	* return 0 if no collision and cone still on screen
	* return 1 if no collision but cone no longer on screen
	* return 2 if collision detected
	*/
	method int moveDown(int location, int step, int carLane, int conesLane, int speed) {
		var int screenBottom;
		var int delayCounter;

		let y = location / 32; // 183 - 231 is collision

		// Define the screen bottom limit
		let screenBottom = 8179; // Memory location equivalent to y = 256

		if (~(location = 24544)) {
			do drawCone(location);

			// Introduce a delay to slow down the movement
			let delayCounter = 0;
			while (delayCounter < speed) {
				let delayCounter = delayCounter + 1;
			}

			// Erase the cone
			do eraseCone(location);

			// Update the cone's location
			let location = location + (96 * step);

			// Check if the cone has left the screen
			if (~(location < screenBottom)) {
				return 1; // Cone is no longer visible
			} else {
				do drawCone(location);
			}
			// Check if the cone has collided with the car
			if (carLane = conesLane){
				if(~(y < 183)){
					if (~(y > 231)){
						return 2; // Collision detected
					}
				}
			}
		}
		return 0; // Cone is still on the screen
	}
	
	// The start location of the first cone for each lane
	function int startPoint1(int lane){
		if(lane = 4){ return ((30*32) + (400/16));}
		if(lane = 3){ return ((30*32) + (280/16));}
		if(lane = 2){ return ((30*32) + (160/16));}
		if(lane = 1){ return ((30*32) + (50/16));}
		return 0;
	}

	// The start location of the second cone for each lane
	function int startPoint2(int lane){
		if(lane = 4){ return ((30*32) + (440/16));}
		if(lane = 3){ return ((30*32) + (320/16));}
		if(lane = 2){ return ((30*32) + (210/16));}
		if(lane = 1){ return ((30*32) + (100/16));}
		return 0;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
}

